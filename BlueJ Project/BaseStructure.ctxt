#BlueJ class context
comment0.params=model
comment0.target=BaseStructure(inf.minife.fe.Model)
comment0.text=\r\n\ Creates\ an\ instance\ of\ the\ structure\ for\ a\ model\r\n\ @param\ model\r\n
comment1.params=index1\ index2
comment1.target=int\ connectNodes(int,\ int)
comment1.text=\r\n\ Connects\ two\ nodes\ with\ a\ standard\ element\ by\ index\r\n\ @param\ index1\ Index\ of\ node\ 1\r\n\ @param\ index2\ Index\ of\ Node\ 2\r\n\ @return\ Index\ of\ the\ new\ element\r\n
comment10.params=name
comment10.target=inf.minife.fe.Node\ getNode(java.lang.String)
comment10.text=\r\n\ Returns\ the\ node\ by\ name\r\n\ @param\ name\ Node's\ name\r\n\ @return\ The\ corresponding\ node\r\n
comment11.params=n\ dof\ value
comment11.target=void\ addForce(inf.minife.fe.Node,\ int,\ double)
comment11.text=\r\n\ Adds\ or\ creates\ force\ to\ an\ node\r\n\ @param\ n\ The\ node\ the\ force\ should\ be\ added\r\n\ @param\ dof\ DOF\ of\ the\ force\r\n\ @param\ value\ Value\ of\ the\ force\r\n
comment12.params=
comment12.target=void\ listNodes()
comment12.text=\r\n\ List\ all\ nodes\ with\ name\r\n
comment13.params=c
comment13.target=java.util.List\ asSortedList(java.util.Collection)
comment14.params=map\ value
comment14.target=java.lang.Object\ getKeyByValue(java.util.Map,\ java.lang.Object)
comment2.params=name1\ name2
comment2.target=void\ connectNodes(java.lang.String,\ java.lang.String)
comment2.text=\r\n\ Connects\ two\ nodes\ with\ a\ standard\ element\ by\ name\ \r\n\ @param\ name1\ Name\ of\ node\ 1\r\n\ @param\ name2\ Name\ of\ node\ 2\r\n
comment3.params=name\ index
comment3.target=void\ connectNodes(java.lang.String,\ int)
comment3.text=\r\n\ Connects\ two\ nodes\ with\ a\ standard\ element\ by\ name\ and\ index\r\n\ @param\ name\ Name\ of\ node\ 1\r\n\ @param\ index\ Index\ of\ node\ 2\r\n
comment4.params=index\ name
comment4.target=void\ connectNodes(int,\ java.lang.String)
comment4.text=\r\n\ Connects\ two\ nodes\ with\ a\ standard\ element\ by\ index\ and\ name\ \r\n\ @param\ index\ index\ of\ node\ 1\r\n\ @param\ name\ Name\ of\ node\ 2\r\n
comment5.params=name1\ name2
comment5.target=void\ connectNodesSymmetric(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Connects\ nodes\ in\ a\ symmetric\ way.\ Uses\ naming\ conventions\ to\ determine\ the\ symmetric\ nodes.\r\n\ Nodes\ must\ be\ names\ "..._links"\ and\ "..._rechts".\r\n\ @param\ name1\ Basename\ of\ node\ 1\ (e.g.\ bodenplatte\ will\ be\ expanded\ to\ bodenplatte_links\ and\ bodenplatte_rechts)\r\n\ @param\ name2\ Basename\ of\ node\ 2\r\n
comment6.params=x\ y\ z
comment6.target=int\ createNode(double,\ double,\ double)
comment6.text=\r\n\ Creates\ a\ node\ at\ given\ coordinates\r\n\ @param\ x\ Coordinate\ at\ X\r\n\ @param\ y\ Coordinate\ at\ Y\r\n\ @param\ z\ Coordinate\ at\ Z\r\n\ @return\ Node\ index\r\n
comment7.params=x\ y\ z\ name
comment7.target=int\ createNode(double,\ double,\ double,\ java.lang.String)
comment7.text=\r\n\ Creates\ a\ names\ node\ at\ given\ coordinates\r\n\ @param\ x\ Coordinate\ at\ X\r\n\ @param\ y\ Coordinate\ at\ Y\r\n\ @param\ z\ Coordinate\ at\ Z\r\n\ @param\ name\ Name\ of\ the\ new\ node\r\n\ @return\ Node\ index\r\n
comment8.params=
comment8.target=inf.minife.fe.Model\ getModel()
comment8.text=\r\n\ Returns\ the\ model\r\n\ @return\ The\ model\r\n
comment9.params=name
comment9.target=int\ getNodeIndex(java.lang.String)
comment9.text=\r\n\ Returns\ the\ node\ index\ for\ a\ give\ name\r\n\ @param\ name\ Name\ of\ the\ node\r\n\ @return\ Index\ of\ node\r\n
numComments=15
